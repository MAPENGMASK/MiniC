/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package cn.edu.com;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 8;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 9;
  /** RegularExpression Id. */
  int HEX_LITERAL = 10;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 11;
  /** RegularExpression Id. */
  int MAIN = 12;
  /** RegularExpression Id. */
  int RETURN = 13;
  /** RegularExpression Id. */
  int DEF = 14;
  /** RegularExpression Id. */
  int INT = 15;
  /** RegularExpression Id. */
  int DOUBLE = 16;
  /** RegularExpression Id. */
  int FLOAT = 17;
  /** RegularExpression Id. */
  int VOID = 18;
  /** RegularExpression Id. */
  int CHAR = 19;
  /** RegularExpression Id. */
  int STRING = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int BREAK = 23;
  /** RegularExpression Id. */
  int CONTINUE = 24;
  /** RegularExpression Id. */
  int SWITCH = 25;
  /** RegularExpression Id. */
  int CASE = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int DO = 29;
  /** RegularExpression Id. */
  int ADD = 30;
  /** RegularExpression Id. */
  int MIN = 31;
  /** RegularExpression Id. */
  int MUL = 32;
  /** RegularExpression Id. */
  int DIV = 33;
  /** RegularExpression Id. */
  int QUEUE = 34;
  /** RegularExpression Id. */
  int ASSIGN = 35;
  /** RegularExpression Id. */
  int ADDONE = 36;
  /** RegularExpression Id. */
  int MINUTEONE = 37;
  /** RegularExpression Id. */
  int LT = 38;
  /** RegularExpression Id. */
  int LE = 39;
  /** RegularExpression Id. */
  int GT = 40;
  /** RegularExpression Id. */
  int GE = 41;
  /** RegularExpression Id. */
  int EQ = 42;
  /** RegularExpression Id. */
  int NE = 43;
  /** RegularExpression Id. */
  int AND = 44;
  /** RegularExpression Id. */
  int OR = 45;
  /** RegularExpression Id. */
  int NOT = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;
  /** RegularExpression Id. */
  int LETTER = 48;
  /** RegularExpression Id. */
  int DIGIT = 49;
  /** RegularExpression Id. */
  int LC = 50;
  /** RegularExpression Id. */
  int RC = 51;
  /** RegularExpression Id. */
  int LM = 52;
  /** RegularExpression Id. */
  int RM = 53;
  /** RegularExpression Id. */
  int LB = 54;
  /** RegularExpression Id. */
  int RB = 55;
  /** RegularExpression Id. */
  int COMMA = 56;
  /** RegularExpression Id. */
  int SEMICOLON = 57;
  /** RegularExpression Id. */
  int COLON = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"main\"",
    "\"return\"",
    "\"default\"",
    "\"int\"",
    "\"double\"",
    "\"float\"",
    "\"void\"",
    "\"char\"",
    "\"String\"",
    "\"if\"",
    "\"else\"",
    "\"break\"",
    "\"continue\"",
    "\"switch\"",
    "\"case\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"++\"",
    "\"--\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
  };

}
