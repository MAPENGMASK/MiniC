/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammar.java */
package cn.edu.com;

import java.io.*;
import java.util.ArrayList;
import cn.edu.util.*;
import java.util.Stack;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants, MyNewGrammarConstants {/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();static QTList qtList=new QTList();//四元式组
  static VariableTable VTB= new VariableTable();//符号表

  public static void main(String filename)
  {

        FileInputStream file;
        FileOutputStream result;


    try {
                  file = new FileInputStream(filename);
                  result = new FileOutputStream("src/tree.txt");
                   MyNewGrammar parser = new MyNewGrammar(file);
                   try {
                        SimpleNode rootNode = parser.Start();
                                rootNode.dump(" ",result);//抓取返回的语法树。
                } catch (Exception e) {
                        System.out.println(e.getMessage());
                 } catch (Error e) {
                        System.out.println(e.getMessage());
                 }

                 qtList.printQTTable();//打印四元式表
                 VTB.printVariableTable();//打印符号表
                 result.close();
        } catch (FileNotFoundException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        } catch (IOException e) {
                        // TODO 自动生成的 catch 块
                        e.printStackTrace();
                }


        FileInputStream fileStream;
        FileOutputStream Binary;

    try {
                  fileStream = new FileInputStream(filename);
                  Binary = new FileOutputStream("src/binary.txt");
                  MyNewGrammar parser = new MyNewGrammar(fileStream);
                  Token token;
                  while(true) {
                              token=parser.getNextToken();
                          if(token!=null&& token.kind!=0) {
                                        Binary.write((token.kind+"\u005ct"+token.image+"\u005cn").getBytes());//保存二元式
                                                }
                                else {
                                  break;}
                                 }
                                  Binary.close();
        } catch (FileNotFoundException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        } catch (IOException e) {
                        // TODO 自动生成的 catch 块
                        e.printStackTrace();
                }
        }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      program();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void program() throws ParseException {
                 /*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MAIN);
      jj_consume_token(LC);
      jj_consume_token(RC);
      jj_consume_token(LB);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case INT:
        case DOUBLE:
        case FLOAT:
        case CHAR:
        case STRING:
        case IF:
        case SWITCH:
        case WHILE:
        case FOR:
        case DO:
        case IDENTIFIER:
        case LB:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        Statementblock();
      }
      jj_consume_token(RB);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Statementblock() throws ParseException {
                       /*@bgen(jjtree) Statementblock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case INT:
      case DOUBLE:
      case FLOAT:
      case CHAR:
      case STRING:
      case IF:
      case SWITCH:
      case WHILE:
      case FOR:
      case DO:
      case IDENTIFIER:
      case SEMICOLON:
        Statement();
        break;
      case LB:
        jj_consume_token(LB);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
          case INT:
          case DOUBLE:
          case FLOAT:
          case CHAR:
          case STRING:
          case IF:
          case SWITCH:
          case WHILE:
          case FOR:
          case DO:
          case IDENTIFIER:
          case LB:
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          Statementblock();
        }
        jj_consume_token(RB);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Statement() throws ParseException {
                   /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case DOUBLE:
      case FLOAT:
      case CHAR:
      case STRING:
      case IDENTIFIER:
      case SEMICOLON:
        SequenceStatement();
        break;
      case IF:
        Conditionalstatements();
        break;
      case WHILE:
      case FOR:
      case DO:
        loopstatement();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case RETURN:
        Return();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void SequenceStatement() throws ParseException {
                           /*@bgen(jjtree) SequenceStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case DOUBLE:
      case FLOAT:
      case CHAR:
      case STRING:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case DOUBLE:
        case FLOAT:
        case CHAR:
        case STRING:
          statement();
          break;
        case IDENTIFIER:
          assignment();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token first = null;
Token middle=null;
String type;
    try {
      type = type();
      first = jj_consume_token(IDENTIFIER);
         VTB.addVariable(new Variable(type,first.image,first.endLine,first.endColumn));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          middle = jj_consume_token(INTEGER_LITERAL);
          break;
        case FLOAT_LITERAL:
          middle = jj_consume_token(FLOAT_LITERAL);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        qtList.addQTInfo(new QTInfo("=",middle.image,"_",first.image));
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        first = jj_consume_token(IDENTIFIER);
     VTB.addVariable(new Variable(type,first.image,first.endLine,first.endColumn));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            middle = jj_consume_token(INTEGER_LITERAL);
            break;
          case FLOAT_LITERAL:
            middle = jj_consume_token(FLOAT_LITERAL);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        qtList.addQTInfo(new QTInfo("=",middle.image,"_",first.image));
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void assignment() throws ParseException {
  /*@bgen(jjtree) assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token first = null;
 String middle = null;
    try {
      first = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDONE:
      case MINUTEONE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDONE:
          jj_consume_token(ADDONE);
          break;
        case MINUTEONE:
          jj_consume_token(MINUTEONE);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGN);
      middle = Expression();
                qtList.addQTInfo(new QTInfo("=",middle,"_",first.image));
                VTB.assignmentJudge(first.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        first = jj_consume_token(IDENTIFIER);
        jj_consume_token(ASSIGN);
        middle = Expression();
        qtList.addQTInfo(new QTInfo("=",middle,"_",first.image));
        VTB.assignmentJudge(first.image);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Conditionalstatements() throws ParseException {
 /*@bgen(jjtree) Conditionalstatements */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALSTATEMENTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ConditionValue value;
QTInfo qt = null;
    try {
      jj_consume_token(IF);
      jj_consume_token(LC);
      value = Logiccondition();
    value.backpatchTrueChain(QTInfo.size+1);
      jj_consume_token(RC);
      Statementblock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
     qt=new QTInfo("J","_","_","T");
        qtList.addQTInfo(qt);
        value.backpatchFalseChain(QTInfo.size+1);
        Statementblock();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         if(qt==null)
                value.backpatchFalseChain(QTInfo.size+1);
         else
                qt.setResult(QTInfo.size+1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ConditionValue Logiccondition() throws ParseException {
 /*@bgen(jjtree) Logiccondition */
 SimpleNode jjtn000 = new SimpleNode(JJTLOGICCONDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ConditionValue value1,value2;
String op=null;
    try {
      value1 = Condition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        op = Logic();
           if(op=="&&") {value1.backpatchTrueChain(QTInfo.size+1); }
                 else if(op=="||") { value1.backpatchFalseChain(QTInfo.size+1);}
        value2 = Logiccondition();
      if(op=="&&") {value2.mergeFalse(value1); }
        else if(op=="||") { value2.mergeTrue(value1);}
                {if (true) return value2;}
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return value1;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String first=null,middle=null,op=null;
ConditionValue value=new ConditionValue();
    try {
      first = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GT:
      case GE:
      case EQ:
      case NE:
        op = Relationship();
        middle = Expression();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (op != null)
    {
      QTInfo qt = new QTInfo("J" + op, first, middle, "T");
      qtList.addQTInfo(qt);
      value.mergeTrue(qt);
    }
    else
    {
      QTInfo qt = new QTInfo("Jnz", first, "_", "T");
      qtList.addQTInfo(qt);
      value.mergeTrue(qt);
    }
    QTInfo qt = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(qt);
    value.mergeFalse(qt);
    {if (true) return value;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void loopstatement() throws ParseException {
 /*@bgen(jjtree) loopstatement */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ConditionValue value;
 int quad;
 int quad1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LC);
                 quad=QTInfo.size+1;
        value = Logiccondition();
     value.backpatchTrueChain(QTInfo.size+1);
        jj_consume_token(RC);
        Statementblock();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     qtList.addQTInfo(new QTInfo("J","_","_",quad));
         value.backpatchFalseChain(QTInfo.size+1);
        break;
      case DO:
        jj_consume_token(DO);
         quad=QTInfo.size+1;
        Statementblock();
        jj_consume_token(WHILE);
        jj_consume_token(LC);
        value = Logiccondition();
         value.backpatchTrueChain(quad);
     value.backpatchFalseChain(QTInfo.size+1);
        jj_consume_token(RC);
        jj_consume_token(SEMICOLON);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LC);
        statement();
                            quad=QTInfo.size+1;
        jj_consume_token(SEMICOLON);
        value = Logiccondition();
                                        quad1=QTInfo.size+1;
        jj_consume_token(SEMICOLON);
        crease();
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    value.backpatchTrueChain(QTInfo.size + 1);
        jj_consume_token(RC);
        Statementblock();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad1));
    value.backpatchFalseChain(QTInfo.size + 1);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first;
  Token op = null, temp = null,jump = null;
  int defaultQuad = 0;
  QTInfo testInfo;
  ArrayList < String > arrayCase = new ArrayList < String > ();
  ArrayList < Integer > arrayQuad = new ArrayList < Integer > ();
  ArrayList < QTInfo > arrayInfo = new ArrayList < QTInfo > ();
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LC);
      first = Expression();
      jj_consume_token(RC);
      jj_consume_token(LB);
    testInfo=new QTInfo("J", "_", "_", "NULL");
    qtList.addQTInfo(testInfo);
      label_5:
      while (true) {
        jj_consume_token(CASE);
        op = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(COLON);
      jump = null;
      arrayCase.add(op.image);
      arrayQuad.add(QTInfo.size + 1);
        Statementblock();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          jump = jj_consume_token(BREAK);
          jj_consume_token(SEMICOLON);
        QTInfo breakInfo = new QTInfo("J", "_", "_", "NULL");
        qtList.addQTInfo(breakInfo);
        arrayInfo.add(breakInfo);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        temp = jj_consume_token(DEF);
        jj_consume_token(COLON);
      jump = null;
      defaultQuad = QTInfo.size + 1;
        Statementblock();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          jump = jj_consume_token(BREAK);
          jj_consume_token(SEMICOLON);
        QTInfo breakInfo = new QTInfo("J", "_", "_", "NULL");
        qtList.addQTInfo(breakInfo);
        arrayInfo.add(breakInfo);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    if (jump == null)
    {
      QTInfo breakInfo = new QTInfo("J", "_", "_", "NULL");
      qtList.addQTInfo(breakInfo);
      arrayInfo.add(breakInfo);
    }
    testInfo.setResult(QTInfo.size + 1);
    for (int i = 0; i < arrayCase.size(); i++)
    {
      String caseImage = arrayCase.get(i);
      int caseSeq = arrayQuad.get(i);
      qtList.addQTInfo(new QTInfo("J==", first, caseImage, caseSeq));
    }
    if (temp != null) //
    {
      qtList.addQTInfo(new QTInfo("J", "_", "_", defaultQuad));
    }
    for (int i = 0; i < arrayInfo.size(); i++)
    {
      arrayInfo.get(i).setResult(QTInfo.size + 1);
    }
      jj_consume_token(RB);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String first;
    try {
      first = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return first;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String first,middle=null,Temp;
        Token op=null;
    try {
      first = MultiplicativeExpression();
                                   Temp=first;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case MIN:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          op = jj_consume_token(ADD);
          break;
        case MIN:
          op = jj_consume_token(MIN);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = MultiplicativeExpression();
     Temp=VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo(op.image,first,middle,Temp));
        first =Temp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return Temp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String first,middle=null,Temp;
Token op=null;
    try {
      first = UnaryExpression();
                          Temp=first;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
        case DIV:
        case QUEUE:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
          op = jj_consume_token(MUL);
          break;
        case DIV:
          op = jj_consume_token(DIV);
          break;
        case QUEUE:
          op = jj_consume_token(QUEUE);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        middle = UnaryExpression();
     Temp=VariableNameGenerator.genVariableName();
    qtList.addQTInfo(new QTInfo(op.image,first,middle,Temp));
    first = Temp;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return Temp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String first;
Token node =null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LC:
        jj_consume_token(LC);
        first = Expression();
        jj_consume_token(RC);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                        {if (true) return first;}
        break;
      case INTEGER_LITERAL:
        node = jj_consume_token(INTEGER_LITERAL);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                                {if (true) return node.image;}
        break;
      case FLOAT_LITERAL:
        node = jj_consume_token(FLOAT_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                                {if (true) return node.image;}
        break;
      case IDENTIFIER:
        node = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return node.image;}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String type() throws ParseException {
 /*@bgen(jjtree) type */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token first =null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        first = jj_consume_token(INT);
        break;
      case STRING:
        first = jj_consume_token(STRING);
        break;
      case DOUBLE:
        first = jj_consume_token(DOUBLE);
        break;
      case FLOAT:
        first = jj_consume_token(FLOAT);
        break;
      case CHAR:
        first = jj_consume_token(CHAR);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
          {if (true) return first.image;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Relationship() throws ParseException {
 /*@bgen(jjtree) Relationship */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONSHIP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token first=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        first = jj_consume_token(GT);
        break;
      case LT:
        first = jj_consume_token(LT);
        break;
      case GE:
        first = jj_consume_token(GE);
        break;
      case LE:
        first = jj_consume_token(LE);
        break;
      case NE:
        first = jj_consume_token(NE);
        break;
      case EQ:
        first = jj_consume_token(EQ);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return first.image;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Logic() throws ParseException {
 /*@bgen(jjtree) Logic */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token m=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        m = jj_consume_token(AND);
        break;
      case OR:
        m = jj_consume_token(OR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return m.image;}
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Return() throws ParseException {
                /*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          jj_consume_token(INTEGER_LITERAL);
          break;
        case FLOAT_LITERAL:
          jj_consume_token(FLOAT_LITERAL);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    qtList.addQTInfo(new QTInfo("J","_","_","0"));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void crease() throws ParseException {
 /*@bgen(jjtree) crease */
 SimpleNode jjtn000 = new SimpleNode(JJTCREASE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token first = null;
Token middle=null;
    try {
      first = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDONE:
      case MINUTEONE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDONE:
          middle = jj_consume_token(ADDONE);
          break;
        case MINUTEONE:
          middle = jj_consume_token(MINUTEONE);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x48000,0x3a3ba000,0x3a3ba000,0x3a3ba000,0x3a3ba000,0x1b8000,0x1b8000,0x180,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x38000000,0x800000,0x4000000,0x800000,0x4000,0xc0000000,0xc0000000,0x0,0x0,0x180,0x1b8000,0x0,0x0,0x180,0x180,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2408000,0x2408000,0x2408000,0x2008000,0x8000,0x8000,0x0,0x8,0x1000000,0x0,0x8,0x30,0x30,0x1000000,0x0,0x3000,0xfc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x48000,0x0,0xfc0,0x3000,0x0,0x0,0x30,0x30,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
