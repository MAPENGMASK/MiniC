/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(MyNewGrammar)package cn.edu.com;

import java.io.*;
import java.util.ArrayList;
import cn.edu.util.*;
import java.util.Stack;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
  static QTList qtList=new QTList();//\u56db\u5143\u5f0f\u7ec4
  static VariableTable VTB= new VariableTable();//\u7b26\u53f7\u8868
 
  public static void main(String filename)
  {
    
 	FileInputStream file;
 	FileOutputStream result;

    
    try {
		  file = new FileInputStream(filename);
		  result = new FileOutputStream("src/tree.txt");
		   MyNewGrammar parser = new MyNewGrammar(file);
		   try {
          		SimpleNode rootNode = parser.Start();
   			 	rootNode.dump(" ",result);//\u6293\u53d6\u8fd4\u56de\u7684\u8bed\u6cd5\u6811\u3002
      		} catch (Exception e) {
        		System.out.println(e.getMessage());
     		 } catch (Error e) {
        		System.out.println(e.getMessage());
     		 }

     		 qtList.printQTTable();//\u6253\u5370\u56db\u5143\u5f0f\u8868
     		 VTB.printVariableTable();//\u6253\u5370\u7b26\u53f7\u8868
     		 result.close();
	} catch (FileNotFoundException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	} catch (IOException e) {
			// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
			e.printStackTrace();
		}


	FileInputStream fileStream;
	FileOutputStream Binary;
	
    try {
		  fileStream = new FileInputStream(filename);
		  Binary = new FileOutputStream("src/binary.txt");
		  MyNewGrammar parser = new MyNewGrammar(fileStream);
		  Token token;
   		  while(true) {
   			      token=parser.getNextToken();
     			  if(token!=null&& token.kind!=0) {
     			    		Binary.write((token.kind+"\t"+token.image+"\n").getBytes());//\u4fdd\u5b58\u4e8c\u5143\u5f0f
     			 			}
     			 	else {
     			 	  break;}
 				 }
 				  Binary.close();
	} catch (FileNotFoundException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	} catch (IOException e) {
			// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
			e.printStackTrace();
		}
	}
}PARSER_END(MyNewGrammar)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :< DECIMAL_LITERAL > ([ "l", "L" ])?//\u6574\u6570\u5b9a\u4e49  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >
  |  < FLOAT_LITERAL :(< INTEGER_LITERAL >)+( "." (< INTEGER_LITERAL >)+)? >//\u6d6e\u70b9\u6570\u5b9a\u4e49| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >//\u5341\u8fdb\u5236| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >//\u5341\u516d\u8fdb\u5236| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >//\u516b\u8fdb\u5236}
TOKEN : /* \u5173\u952e\u5b57*/
{
    < MAIN : "main">
  | < RETURN:"return">
  | < DEF:"default" >
  
  | < INT : "int">
  | < DOUBLE :"double" >
  | < FLOAT :"float" >
  | < VOID : "void">
  | < CHAR:"char" >
  | < STRING :"String">
  
  | < IF:"if">
  | < ELSE:"else" >
  | < BREAK:"break" >
  | < CONTINUE:"continue" >
  
  | < SWITCH:"switch" >
  | < CASE:"case" >
  
  | < WHILE:"while" >
  
  | < FOR:"for" >
  | < DO:"do" >
}
TOKEN : /* \u7b97\u672f\u8fd0\u7b97\u7b26 */
{
  	< ADD:"+">
  | < MIN:"-">
  | < MUL:"*">
  | < DIV:"/">
  | < QUEUE:"%" >
  | < ASSIGN:"=">

  | < ADDONE:"++" >
  | < MINUTEONE:"--" >
}
TOKEN : /* \u903b\u8f91\u8fd0\u7b97\u7b26 */
{
	< LT:"<"  >
  | < LE:"<=" >
  | < GT:">"  >
  | < GE:">=" >
  | < EQ:"==" >
  | < NE:"!=" >
  
  | < AND:"&&" >
  | < OR:"||" >
  | < NOT:"!" >
}TOKEN : /* \u6807\u8bc6\u7b26 */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >     )* >	| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
	| < #DIGIT : [ "0"-"9" ] >
}
TOKEN:/*\u754c\u7b26*/
{
  <LC:"(">
  | <RC:")">
  | <LM:"[">
  | <RM:"]">
  | <LB:"{">
  | <RB:"}">
  | < COMMA:"," >
  | < SEMICOLON:";" >
  | < COLON:":" >
}
SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  program() < EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void program() :{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}//\u7a0b\u5e8f\u5165\u53e3{/*@bgen(jjtree) program */
 try {
/*@egen*/ (< INT >|< VOID >)
 < MAIN >< LC >< RC >< LB > (Statementblock())* <RB>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}
void Statementblock():{/*@bgen(jjtree) Statementblock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}//\u8bed\u53e5\u5757
{/*@bgen(jjtree) Statementblock */
        try {
/*@egen*/
	Statement()|< LB >(Statementblock())*< RB >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}
void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }//\u8bed\u53e5
{/*@bgen(jjtree) Statement */
          try {
/*@egen*/
	  (
	    SequenceStatement()				//\u987a\u5e8f\u8bed\u53e5
		| Conditionalstatements()					//\u6761\u4ef6\u8bed\u53e5
		| loopstatement()						//\u5faa\u73af\u8bed\u53e5
		| SwitchStatement()      				//switch-case
		| Return()
	  )/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/							
}
void SequenceStatement(): {/*@bgen(jjtree) SequenceStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }//\u987a\u5e8f\u8bed\u53e5
{/*@bgen(jjtree) SequenceStatement */
        try {
/*@egen*/
	[statement()|assignment()] < SEMICOLON >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/			//\u58f0\u660e\u6216\u8d4b\u503c
}
void statement() : //\u58f0\u660e\u8bed\u53e5 type identifier = LITERALS,...
{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token first = null;
Token middle=null;
String type; }
{/*@bgen(jjtree) statement */
 try {
/*@egen*/
 type = type()
 	first=< IDENTIFIER>
 	{VTB.addVariable(new Variable(type,first.image,first.endLine,first.endColumn)); }
 	( 	  <ASSIGN> (middle=<INTEGER_LITERAL>|middle=< FLOAT_LITERAL >)
 	{ 
	qtList.addQTInfo(new QTInfo("=",middle.image,"_",first.image));
  	 })?
 (
    <COMMA>
    first=< IDENTIFIER >
    {VTB.addVariable(new Variable(type,first.image,first.endLine,first.endColumn)); }
    (
    <ASSIGN> (middle=<INTEGER_LITERAL>|middle=< FLOAT_LITERAL >)
    { 
	qtList.addQTInfo(new QTInfo("=",middle.image,"_",first.image));
   	}
  	)?
  )*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void assignment()://\u8d4b\u503c\u8bed\u53e5
 {/*@bgen(jjtree) assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/Token first = null;
 String middle = null;
 }
{/*@bgen(jjtree) assignment */
        try {
/*@egen*/
	first=< IDENTIFIER>
	(<ADDONE >|<MINUTEONE >)?

	< ASSIGN>middle=Expression()
	{
		qtList.addQTInfo(new QTInfo("=",middle,"_",first.image));
		VTB.assignmentJudge(first.image);
	}
	(
    <COMMA>
    first=< IDENTIFIER > <ASSIGN> middle=Expression()
   { 
	qtList.addQTInfo(new QTInfo("=",middle,"_",first.image));
	VTB.assignmentJudge(first.image);
   }
   )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Conditionalstatements()://\u6761\u4ef6\u8bed\u53e5
{/*@bgen(jjtree) Conditionalstatements */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALSTATEMENTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ConditionValue value;
QTInfo qt = null;}
{/*@bgen(jjtree) Conditionalstatements */
  try {
/*@egen*/
  <IF> <LC> value=Logiccondition()
  { value.backpatchTrueChain(QTInfo.size+1);}
  <RC> Statementblock()
  (
    LOOKAHEAD(1)
    <ELSE>
    {qt=new QTInfo("J","_","_","T");
	qtList.addQTInfo(qt);
	value.backpatchFalseChain(QTInfo.size+1);
     }
    Statementblock()
 	)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	{if(qt==null)
 		value.backpatchFalseChain(QTInfo.size+1);
 	 else
 	 	qt.setResult(QTInfo.size+1);
 	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
ConditionValue Logiccondition() ://\u903b\u8f91
{/*@bgen(jjtree) Logiccondition */
 SimpleNode jjtn000 = new SimpleNode(JJTLOGICCONDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ConditionValue value1,value2;
String op=null;
}
{/*@bgen(jjtree) Logiccondition */
  try {
/*@egen*/
  value1=Condition()
  (
    op=Logic()
 	 { if(op=="&&") {value1.backpatchTrueChain(QTInfo.size+1); }
   		 else if(op=="||") { value1.backpatchFalseChain(QTInfo.size+1);}
    }
   value2=Logiccondition()
    { if(op=="&&") {value2.mergeFalse(value1); }
    	else if(op=="||") { value2.mergeTrue(value1);}
		return value2;
    	}
	)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return value1;
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
ConditionValue Condition() :// > >= <= == != 
{/*@bgen(jjtree) Condition */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String first=null,middle=null,op=null;
ConditionValue value=new ConditionValue();
}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  first=Expression()
 (op=Relationship() middle=Expression())?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (op != null)
    {
      QTInfo qt = new QTInfo("J" + op, first, middle, "T");
      qtList.addQTInfo(qt);
      value.mergeTrue(qt);
    }
    else
    {
      QTInfo qt = new QTInfo("Jnz", first, "_", "T");
      qtList.addQTInfo(qt);
      value.mergeTrue(qt);
    }
    QTInfo qt = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(qt);
    value.mergeFalse(qt);
    return value;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void loopstatement()://\u5faa\u73af\u8bed\u53e5
{/*@bgen(jjtree) loopstatement */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ConditionValue value;
 int quad;
 int quad1;
  }
{/*@bgen(jjtree) loopstatement */
  try {
/*@egen*/
  (
   <WHILE> <LC> {quad=QTInfo.size+1; }
   value=Logiccondition()
   { value.backpatchTrueChain(QTInfo.size+1);}
   <RC> Statementblock()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { qtList.addQTInfo(new QTInfo("J","_","_",quad));
	 value.backpatchFalseChain(QTInfo.size+1);
   }
  )|(
   <DO> {quad=QTInfo.size+1; }
   Statementblock()
   <WHILE> <LC> value=Logiccondition()
   {
	 value.backpatchTrueChain(quad);
     value.backpatchFalseChain(QTInfo.size+1);
   }
     <RC> <SEMICOLON>
    )|(
   <FOR> <LC> statement() { quad=QTInfo.size+1;}
   <SEMICOLON> value=Logiccondition() { quad1=QTInfo.size+1; }
    <SEMICOLON>crease()
    {
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    value.backpatchTrueChain(QTInfo.size + 1);
    }
  <RC>
   Statementblock()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad1));
    value.backpatchFalseChain(QTInfo.size + 1);
   }
    )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SwitchStatement()://switch\u8bed\u53e5
{/*@bgen(jjtree) SwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String first;
  Token op = null, temp = null,jump = null;
  int defaultQuad = 0;
  QTInfo testInfo;
  ArrayList < String > arrayCase = new ArrayList < String > ();
  ArrayList < Integer > arrayQuad = new ArrayList < Integer > ();
  ArrayList < QTInfo > arrayInfo = new ArrayList < QTInfo > ();}
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  <SWITCH><LC> first=Expression()<RC> <LB >
  {
    testInfo=new QTInfo("J", "_", "_", "NULL");
    qtList.addQTInfo(testInfo);
  }
  (
    <CASE> op=<INTEGER_LITERAL> <COLON>
    {
      jump = null;
      arrayCase.add(op.image); 
      arrayQuad.add(QTInfo.size + 1); 
    }
  	Statementblock()
  	(
  	  jump=<BREAK> <SEMICOLON>
  	  {
        QTInfo breakInfo = new QTInfo("J", "_", "_", "NULL");
        qtList.addQTInfo(breakInfo);
        arrayInfo.add(breakInfo);
      }
  	)?
  )+
  (
    temp=<DEF> <COLON>
     {
      jump = null;
      defaultQuad = QTInfo.size + 1;
    }
    Statementblock()
    (
  	  jump=<BREAK> <SEMICOLON>
  	   {
        QTInfo breakInfo = new QTInfo("J", "_", "_", "NULL");
        qtList.addQTInfo(breakInfo);
        arrayInfo.add(breakInfo);
      }
  	)?
  )?
  {
    if (jump == null)
    {
      QTInfo breakInfo = new QTInfo("J", "_", "_", "NULL");
      qtList.addQTInfo(breakInfo);
      arrayInfo.add(breakInfo);
    }
    testInfo.setResult(QTInfo.size + 1);
    for (int i = 0; i < arrayCase.size(); i++)
    {
      String caseImage = arrayCase.get(i);
      int caseSeq = arrayQuad.get(i);
      qtList.addQTInfo(new QTInfo("J==", first, caseImage, caseSeq));
    }
    if (temp != null) //
    {
      qtList.addQTInfo(new QTInfo("J", "_", "_", defaultQuad));
    }
    for (int i = 0; i < arrayInfo.size(); i++)
    {
      arrayInfo.get(i).setResult(QTInfo.size + 1);
    }
  }
  <RB>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String Expression() ://\u8868\u8fbe\u5f0f
{/*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String first;}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  first=AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return first;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String AdditiveExpression() ://\u52a0\u6cd5\u5f0f
{/*@bgen(jjtree) AdditiveExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String first,middle=null,Temp;
	Token op=null;}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  first=MultiplicativeExpression(){Temp=first;}
  (
    (
      op=< ADD>
    | op=< MIN>
    )
    middle=MultiplicativeExpression()
    {Temp=VariableNameGenerator.genVariableName();
	qtList.addQTInfo(new QTInfo(op.image,first,middle,Temp));
	first =Temp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return Temp;
   }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String MultiplicativeExpression() ://\u4e58\u6cd5\u5f0f
{/*@bgen(jjtree) MultiplicativeExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String first,middle=null,Temp;
Token op=null;}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  first=UnaryExpression(){Temp=first; }
  (
    (
      op=< MUL>
    | op=< DIV>
    | op=< QUEUE>
    )
    middle=UnaryExpression()
    {Temp=VariableNameGenerator.genVariableName();
    qtList.addQTInfo(new QTInfo(op.image,first,middle,Temp));
    first = Temp;}
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return Temp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String UnaryExpression() ://\u4e00\u5143\u5f0f
{/*@bgen(jjtree) UnaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String first;
Token node =null;}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  < LC> first=Expression() < RC>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {	return first;}
| node=< INTEGER_LITERAL >/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/{	return node.image;}
| node=< FLOAT_LITERAL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{	return node.image; }
| node=< IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { return node.image;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String type()://\u57fa\u672c\u6570\u636e\u7c7b\u578b
{/*@bgen(jjtree) type */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token first =null;}
{/*@bgen(jjtree) type */
 try {
/*@egen*/
 (      first=< INT >
  | first=< STRING >
  | first=< DOUBLE  >
  | first=< FLOAT  >
  | first=< CHAR >
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	  return first.image;
	}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
String Relationship() : //\u5173\u7cfb\u8fd0\u7b97\u7b26
{/*@bgen(jjtree) Relationship */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONSHIP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token first=null;}
{/*@bgen(jjtree) Relationship */
 try {
/*@egen*/
 (
   first=<GT>
| first=<LT>
| first=<GE>
| first=<LE>
| first=<NE>
| first=<EQ>
  )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
	  return first.image;
	}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
String Logic()://&& ||
{/*@bgen(jjtree) Logic */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token m=null;}
{/*@bgen(jjtree) Logic */
  try {
/*@egen*/
  m=<AND>|m=<OR>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return m.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Return(): {/*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }//\u8fd4\u56de\u8bed\u53e5
{/*@bgen(jjtree) Return */
  try {
/*@egen*/
  < RETURN > (< INTEGER_LITERAL >|< FLOAT_LITERAL >)? < SEMICOLON >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtList.addQTInfo(new QTInfo("J","_","_","0"));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void crease()://\u81ea\u589e\u81ea\u51cf
{/*@bgen(jjtree) crease */
 SimpleNode jjtn000 = new SimpleNode(JJTCREASE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token first = null;
Token middle=null;}
{/*@bgen(jjtree) crease */
try {
/*@egen*/
first=< IDENTIFIER>(middle=<ADDONE >|middle=<MINUTEONE >)?/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  //qtList.addQTInfo(new QTInfo(middle.image,first.image,1,first.image));
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
 }
